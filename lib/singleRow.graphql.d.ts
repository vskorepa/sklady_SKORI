/* d335d530c8c4c6a7d49dbfbd57747909853af4e8
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../node_modules/@types/graphql-let/__generated__/__SCHEMA__';
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    AddSingleRow: Row;
    deleteSingleRow: Row;
    editCount: Row;
};
export declare type MutationAddSingleRowArgs = {
    id: Scalars['Int'];
    name: Scalars['String'];
    code: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    count: Scalars['Int'];
    storage: Scalars['String'];
};
export declare type MutationDeleteSingleRowArgs = {
    id: Scalars['Int'];
    storage: Scalars['String'];
};
export declare type MutationEditCountArgs = {
    id: Scalars['Int'];
    count: Scalars['Int'];
    storage: Scalars['String'];
};
export declare type Query = {
    __typename?: 'Query';
    singleRow: Row;
    multipleRows: Array<Row>;
};
export declare type QuerySingleRowArgs = {
    id: Scalars['Int'];
    storage: Scalars['String'];
};
export declare type QueryMultipleRowsArgs = {
    storage: Scalars['String'];
};
export declare type Row = {
    __typename?: 'Row';
    id: Scalars['Int'];
    name: Scalars['String'];
    code: Scalars['String'];
    description?: Maybe<Scalars['String']>;
    count: Scalars['Int'];
    storage: Scalars['String'];
};
export declare type SingleRowQueryVariables = __SchemaTypes__.Exact<{
    id: __SchemaTypes__.Scalars['Int'];
    storage: __SchemaTypes__.Scalars['String'];
}>;
export declare type SingleRowQuery = ({
    __typename?: 'Query';
} & {
    singleRow: ({
        __typename?: 'Row';
    } & Pick<__SchemaTypes__.Row, 'id' | 'name' | 'code' | 'count' | 'description'>);
});
export declare type AddSingleRowMutationVariables = __SchemaTypes__.Exact<{
    id: __SchemaTypes__.Scalars['Int'];
    name: __SchemaTypes__.Scalars['String'];
    code: __SchemaTypes__.Scalars['String'];
    description?: __SchemaTypes__.Maybe<__SchemaTypes__.Scalars['String']>;
    count: __SchemaTypes__.Scalars['Int'];
    storage: __SchemaTypes__.Scalars['String'];
}>;
export declare type AddSingleRowMutation = ({
    __typename?: 'Mutation';
} & {
    AddSingleRow: ({
        __typename?: 'Row';
    } & Pick<__SchemaTypes__.Row, 'id' | 'name' | 'code' | 'count' | 'description'>);
});
export declare type DeleteSingleRowMutationVariables = __SchemaTypes__.Exact<{
    id: __SchemaTypes__.Scalars['Int'];
    storage: __SchemaTypes__.Scalars['String'];
}>;
export declare type DeleteSingleRowMutation = ({
    __typename?: 'Mutation';
} & {
    deleteSingleRow: ({
        __typename?: 'Row';
    } & Pick<__SchemaTypes__.Row, 'id'>);
});
export declare type EditCountMutationVariables = __SchemaTypes__.Exact<{
    id: __SchemaTypes__.Scalars['Int'];
    count: __SchemaTypes__.Scalars['Int'];
    storage: __SchemaTypes__.Scalars['String'];
}>;
export declare type EditCountMutation = ({
    __typename?: 'Mutation';
} & {
    editCount: ({
        __typename?: 'Row';
    } & Pick<__SchemaTypes__.Row, 'id' | 'count'>);
});
export declare const SingleRowDocument: Apollo.DocumentNode;
/**
 * __useSingleRowQuery__
 *
 * To run a query within a React component, call `useSingleRowQuery` and pass it any options that fit your needs.
 * When your component renders, `useSingleRowQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSingleRowQuery({
 *   variables: {
 *      id: // value for 'id'
 *      storage: // value for 'storage'
 *   },
 * });
 */
export declare function useSingleRowQuery(baseOptions: Apollo.QueryHookOptions<SingleRowQuery, SingleRowQueryVariables>): Apollo.QueryResult<SingleRowQuery, any>;
export declare function useSingleRowLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SingleRowQuery, SingleRowQueryVariables>): Apollo.QueryTuple<SingleRowQuery, any>;
export declare type SingleRowQueryHookResult = ReturnType<typeof useSingleRowQuery>;
export declare type SingleRowLazyQueryHookResult = ReturnType<typeof useSingleRowLazyQuery>;
export declare type SingleRowQueryResult = Apollo.QueryResult<SingleRowQuery, SingleRowQueryVariables>;
export declare const AddSingleRowDocument: Apollo.DocumentNode;
export declare type AddSingleRowMutationFn = Apollo.MutationFunction<AddSingleRowMutation, AddSingleRowMutationVariables>;
/**
 * __useAddSingleRowMutation__
 *
 * To run a mutation, you first call `useAddSingleRowMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddSingleRowMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addSingleRowMutation, { data, loading, error }] = useAddSingleRowMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      code: // value for 'code'
 *      description: // value for 'description'
 *      count: // value for 'count'
 *      storage: // value for 'storage'
 *   },
 * });
 */
export declare function useAddSingleRowMutation(baseOptions?: Apollo.MutationHookOptions<AddSingleRowMutation, AddSingleRowMutationVariables>): Apollo.MutationTuple<AddSingleRowMutation, any>;
export declare type AddSingleRowMutationHookResult = ReturnType<typeof useAddSingleRowMutation>;
export declare type AddSingleRowMutationResult = Apollo.MutationResult<AddSingleRowMutation>;
export declare type AddSingleRowMutationOptions = Apollo.BaseMutationOptions<AddSingleRowMutation, AddSingleRowMutationVariables>;
export declare const DeleteSingleRowDocument: Apollo.DocumentNode;
export declare type DeleteSingleRowMutationFn = Apollo.MutationFunction<DeleteSingleRowMutation, DeleteSingleRowMutationVariables>;
/**
 * __useDeleteSingleRowMutation__
 *
 * To run a mutation, you first call `useDeleteSingleRowMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSingleRowMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSingleRowMutation, { data, loading, error }] = useDeleteSingleRowMutation({
 *   variables: {
 *      id: // value for 'id'
 *      storage: // value for 'storage'
 *   },
 * });
 */
export declare function useDeleteSingleRowMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSingleRowMutation, DeleteSingleRowMutationVariables>): Apollo.MutationTuple<DeleteSingleRowMutation, any>;
export declare type DeleteSingleRowMutationHookResult = ReturnType<typeof useDeleteSingleRowMutation>;
export declare type DeleteSingleRowMutationResult = Apollo.MutationResult<DeleteSingleRowMutation>;
export declare type DeleteSingleRowMutationOptions = Apollo.BaseMutationOptions<DeleteSingleRowMutation, DeleteSingleRowMutationVariables>;
export declare const EditCountDocument: Apollo.DocumentNode;
export declare type EditCountMutationFn = Apollo.MutationFunction<EditCountMutation, EditCountMutationVariables>;
/**
 * __useEditCountMutation__
 *
 * To run a mutation, you first call `useEditCountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditCountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editCountMutation, { data, loading, error }] = useEditCountMutation({
 *   variables: {
 *      id: // value for 'id'
 *      count: // value for 'count'
 *      storage: // value for 'storage'
 *   },
 * });
 */
export declare function useEditCountMutation(baseOptions?: Apollo.MutationHookOptions<EditCountMutation, EditCountMutationVariables>): Apollo.MutationTuple<EditCountMutation, any>;
export declare type EditCountMutationHookResult = ReturnType<typeof useEditCountMutation>;
export declare type EditCountMutationResult = Apollo.MutationResult<EditCountMutation>;
export declare type EditCountMutationOptions = Apollo.BaseMutationOptions<EditCountMutation, EditCountMutationVariables>;
