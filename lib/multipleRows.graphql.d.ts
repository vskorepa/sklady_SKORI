/* 7d6bcf82407b76f553f0d55ed620a43887ec305f
 * This file is automatically generated by graphql-let. */

import * as Types from "graphql-let/__generated__/__types__";
import * as Apollo from '@apollo/client';
export declare type MultipleRowsQueryVariables = Types.Exact<{
  storage: Types.Scalars['String'];
}>;
export declare type MultipleRowsQuery = ({
  __typename?: 'Query';
} & {
  multipleRows: Array<({
    __typename?: 'Row';
  } & Pick<Types.Row, 'name' | 'id' | 'code' | 'count' | 'description'>)>;
});
export declare const MultipleRowsDocument: Apollo.DocumentNode;
/**
 * __useMultipleRowsQuery__
 *
 * To run a query within a React component, call `useMultipleRowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMultipleRowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMultipleRowsQuery({
 *   variables: {
 *      storage: // value for 'storage'
 *   },
 * });
 */

export declare function useMultipleRowsQuery(baseOptions: Apollo.QueryHookOptions<MultipleRowsQuery, MultipleRowsQueryVariables>): Apollo.QueryResult<MultipleRowsQuery, Types.Exact<{
  storage: string;
}>>;
export declare function useMultipleRowsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MultipleRowsQuery, MultipleRowsQueryVariables>): Apollo.QueryTuple<MultipleRowsQuery, Types.Exact<{
  storage: string;
}>>;
export declare type MultipleRowsQueryHookResult = ReturnType<typeof useMultipleRowsQuery>;
export declare type MultipleRowsLazyQueryHookResult = ReturnType<typeof useMultipleRowsLazyQuery>;
export declare type MultipleRowsQueryResult = Apollo.QueryResult<MultipleRowsQuery, MultipleRowsQueryVariables>;