/* b4bff86c8fb340c624cda2e8ee9759146e92316d
 * This file is automatically generated by graphql-let. */

import * as __SchemaTypes__ from '../node_modules/@types/graphql-let/__generated__/__SCHEMA__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  __typename?: 'Mutation';
  AddSingleRow: Row;
  deleteSingleRow: Row;
  editCount: Row;
};


export type MutationAddSingleRowArgs = {
  id: Scalars['Int'];
  name: Scalars['String'];
  code: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  count: Scalars['Int'];
};


export type MutationDeleteSingleRowArgs = {
  id: Scalars['Int'];
};


export type MutationEditCountArgs = {
  id: Scalars['Int'];
  count: Scalars['Int'];
};

export type Query = {
  __typename?: 'Query';
  singleRow: Row;
  multipleRows: Array<Row>;
};


export type QuerySingleRowArgs = {
  id: Scalars['Int'];
};

export type Row = {
  __typename?: 'Row';
  id: Scalars['Int'];
  name: Scalars['String'];
  code: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  count: Scalars['Int'];
};

export type MultipleRowsQueryVariables = __SchemaTypes__.Exact<{ [key: string]: never; }>;


export type MultipleRowsQuery = (
  { __typename?: 'Query' }
  & { multipleRows: Array<(
    { __typename?: 'Row' }
    & Pick<__SchemaTypes__.Row, 'name' | 'id' | 'code' | 'count'>
  )> }
);


export const MultipleRowsDocument = gql`
    query MultipleRows {
  multipleRows {
    name
    id
    code
    count
  }
}
    `;

/**
 * __useMultipleRowsQuery__
 *
 * To run a query within a React component, call `useMultipleRowsQuery` and pass it any options that fit your needs.
 * When your component renders, `useMultipleRowsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMultipleRowsQuery({
 *   variables: {
 *   },
 * });
 */
export function useMultipleRowsQuery(baseOptions?: Apollo.QueryHookOptions<MultipleRowsQuery, MultipleRowsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MultipleRowsQuery, MultipleRowsQueryVariables>(MultipleRowsDocument, options);
      }
export function useMultipleRowsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MultipleRowsQuery, MultipleRowsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MultipleRowsQuery, MultipleRowsQueryVariables>(MultipleRowsDocument, options);
        }
export type MultipleRowsQueryHookResult = ReturnType<typeof useMultipleRowsQuery>;
export type MultipleRowsLazyQueryHookResult = ReturnType<typeof useMultipleRowsLazyQuery>;
export type MultipleRowsQueryResult = Apollo.QueryResult<MultipleRowsQuery, MultipleRowsQueryVariables>;